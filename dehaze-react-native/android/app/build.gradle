apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * 这是用于自定义 React Native Android 应用的配置块。
 * 默认情况下你不需要应用任何配置，只需取消注释你需要的行即可。
 */
react {
    /* 文件夹配置 */
    // 项目根目录，即 package.json 所在的目录。默认值为 '../..'
    // root = file("../../")

    // react-native NPM 包所在的目录。默认值为 ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")

    // react-native Codegen 包所在的目录。默认值为 ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    // React Native CLI 的入口文件 cli.js。默认值为 ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* 构建变体配置 */
    // 可调试的构建变体列表。对于这些变体，将跳过 JS bundle 和资源的打包过程。
    // 默认只包含 'debug' 变体。
    // 如果你添加了诸如 lite、prod 等不同的产品风味（flavors），需要将可调试的变体列在这里。
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* 打包配置 */
    // 包含 Node.js 命令及其参数的列表。默认值仅为 'node'
    // nodeExecutableAndArgs = ["node"]

    // 执行打包时运行的命令。默认值为 'bundle'
    // bundleCommand = "ram-bundle"

    // CLI 配置文件的路径。默认为空
    // bundleConfig = file(../rn-cli.config.js)

    // 生成的资源文件名称，该文件包含你的 JS bundle
    // bundleAssetName = "MyApplication.android.bundle"

    // 用于生成 bundle 的入口文件。默认值为 'index.android.js' 或 'index.js'
    // entryFile = file("../js/MyApplication.android.js")

    // 传递给 'bundle' 命令的额外参数列表
    // 详见：https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes 引擎配置 */
    // 要运行的 Hermes 编译器命令。默认值为 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"

    // 传递给 Hermes 编译器的参数列表。默认值为 ["-O", "-output-source-map"]
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * 设置为 true 以在 Release 构建中运行 Proguard 来压缩 Java 字节码。
 */
def enableProguardInReleaseBuilds = false

/**
 * JavaScriptCore (JSC) 的首选构建版本
 *
 * 例如，要使用国际化版本，可以使用：
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * 国际化版本包含 ICU i18n 库和必要的数据，
 * 允许使用如 `Date.toLocaleString` 和 `String.localeCompare` 等方法，
 * 在使用除 en-US 以外的其他语言环境时能给出正确结果。
 * 注意，此版本比默认版本大约 6MiB（每个架构）。
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.pei.react.dehaze"
    defaultConfig {
        applicationId "com.pei.react.dehaze"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    
    // 添加 packagingOptions 配置
    packagingOptions {
        pickFirst '**/*.so'
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}